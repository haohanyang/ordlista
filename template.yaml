# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ordlista backend functions

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Default: Test
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html

Resources:
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: !Sub
                - "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}"
                - UserPoolId: !Ref CognitoUserPool
              audience:
                - !Ref CognitoUserPoolClient
            IdentitySource: $request.header.Authorization
        DefaultAuthorizer: OAuth2Authorizer

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Connectors:
      UserTableWrite:
        Properties:
          Destination:
            Id: UserTable
          Permissions:
            - Write
    Properties:
      FunctionName: CreateUser
      CodeUri: src/functions/create_user
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Add a newly created user to the DynamoDB table. This is triggered by AWS Cognito Pre sign-up Lambda trigger.
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
      Events:
        Cognito:
          Type: Cognito
          Properties:
            UserPool:
              Ref: CognitoUserPool
            Trigger: PreSignUp

  CreateListFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableReadWrite:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Write
            - Read
    Properties:
      FunctionName: CreateList
      CodeUri: src/functions/create_list
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Create a word list and insert it into the DynamoDB table
      Environment:
        Variables:
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lists
            Method: POST

  CreateWordFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableReadWrite:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Write
            - Read
      WordTableReadWrite:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Write
            - Read
    Properties:
      FunctionName: CreateWord
      CodeUri: src/functions/create_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Create a word and insert it into the DynamoDB table
      Environment:
        Variables:
          WORD_TABLE: !Ref WordTable
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /words
            Method: POST

  DeleteListFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableReadWrite:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Write
            - Read
    Properties:
      FunctionName: DeleteList
      CodeUri: src/functions/delete_list
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Delete a word list from the DynamoDB table
      Environment:
        Variables:
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lists/{listId}
            Method: DELETE

  DeleteWordFunction:
    Type: AWS::Serverless::Function
    Connectors:
      WordTableReadWrite:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Write
            - Read
    Properties:
      FunctionName: DeleteWord
      CodeUri: src/functions/delete_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Delete a word from the DynamoDB table
      Environment:
        Variables:
          WORD_TABLE: !Ref WordTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /words/{wordId}
            Method: DELETE

  GetListFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableRead:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Read
    Properties:
      FunctionName: GetList
      CodeUri: src/functions/get_list
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Get a single word by id list from the DynamoDB table
      Environment:
        Variables:
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lists/{listId}
            Method: GET

  GetListsFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableRead:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Read
      WordTableRead:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Read
    Properties:
      FunctionName: GetLists
      CodeUri: src/functions/get_lists
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Get all lists created by a user from the DynamoDB table
      Environment:
        Variables:
          LIST_TABLE: !Ref WordListTable
          WORD_TABLE: !Ref WordTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/lists
            Method: GET

  GetUserProfileFunction:
    Type: AWS::Serverless::Function
    Connectors:
      UserTableRead:
        Properties:
          Destination:
            Id: UserTable
          Permissions:
            - Read
    Properties:
      FunctionName: GetUserProfile
      CodeUri: src/functions/get_user_profile
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Get user profile by id from the DynamoDB table
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/profile
            Method: GET

  GetWordFunction:
    Type: AWS::Serverless::Function
    Connectors:
      WordTableRead:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Read
    Properties:
      FunctionName: GetWord
      CodeUri: src/functions/get_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Get a single word by id from the DynamoDB table
      Environment:
        Variables:
          WORD_TABLE: !Ref WordTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /words/{wordId}
            Method: GET

  GetWordsFunction:
    Type: AWS::Serverless::Function
    Connectors:
      WordTableRead:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Read
      ListTableRead:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Read
    Properties:
      FunctionName: GetWord
      CodeUri: src/functions/get_words
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Get all words of a list from the DynamoDB table
      Environment:
        Variables:
          WORD_TABLE: !Ref WordTable
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lists/{listId}/words
            Method: GET

  UpdateListFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ListTableReadWrite:
        Properties:
          Destination:
            Id: WordListTable
          Permissions:
            - Read
            - Write
    Properties:
      FunctionName: UpdateList
      CodeUri: src/functions/update_list
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Update a word list in the DynamoDB table
      Environment:
        Variables:
          LIST_TABLE: !Ref WordListTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lists/{listId}
            Method: PATCH

  UpdateWordFunction:
    Type: AWS::Serverless::Function
    Connectors:
      WordTableReadWrite:
        Properties:
          Destination:
            Id: WordTable
          Permissions:
            - Read
            - Write
    Properties:
      FunctionName: UpdateWord
      CodeUri: src/functions/update_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Update a word in the DynamoDB table
      Environment:
        Variables:
          WORD_TABLE: !Ref WordTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /words/{wordId}
            Method: PATCH

  SearchWordFunction:
    Type: AWS::Serverless::Function
    Connectors:
      DictTableRead:
        Properties:
          Destination:
            Id: DictTable
          Permissions:
            - Read
    Properties:
      FunctionName: SearchWord
      CodeUri: src/functions/search_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 100
      Description: Update a word in the DynamoDB table
      Environment:
        Variables:
          DICT_TABLE: !Ref DictTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /search
            Method: POST

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: UserTable
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  WordListTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WordListTable
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: creatorId
          AttributeType: S
        - AttributeName: description
          AttributeType: S
        - AttributeName: lastModifiedAt
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: creatorId-createdAt-index
          KeySchema:
            - AttributeName: creatorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  WordTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WordTable
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: audioUrl
          AttributeType: S
        - AttributeName: synonyms
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: creatorId
          AttributeType: S
        - AttributeName: examples
          AttributeType: SS
        - AttributeName: lastModifiedAt
          AttributeType: S
        - AttributeName: listId
          AttributeType: S
        - AttributeName: inflections
          AttributeType: S
        - AttributeName: swedishWord
          AttributeType: S
        - AttributeName: translation
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: listId-createdAt-index
          KeySchema:
            - AttributeName: listId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: creatorId-createdAt-index
          KeySchema:
            - AttributeName: creatorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DictTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DictTable
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: audioUrl
          AttributeType: S
        - AttributeName: synonyms
          AttributeType: SS
        - AttributeName: class
          AttributeType: S
        - AttributeName: examples
          AttributeType: SS
        - AttributeName: inflections
          AttributeType: SS
        - AttributeName: swedishWord
          AttributeType: S
        - AttributeName: translations
          AttributeType: SS
      GlobalSecondaryIndexes:
        - IndexName: swedishWord-class-index
          KeySchema:
            - AttributeName: swedishWord
              KeyType: HASH
            - AttributeName: class
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OrdlistaUserPool
      MfaConfiguration: OFF
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: OrdlistaUserPoolClient
      GenerateSecret: false

Outputs:
  HttpApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/" #"https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
